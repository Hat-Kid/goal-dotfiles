;; target2.gc

(define *yellow-jump-mods* (new 'static 'surface
                             :name 'jump
                             :turnv 49152.0
                             :turnvv 524288.0
                             :tiltv 65536.0
                             :tiltvv 131072.0
                             :transv-max 40960.0
                             :target-speed 40960.0
                             :fric 0.1
                             :nonlin-fric-dist 1.0
                             :slip-factor 1.0
                             :slide-factor 1.0
                             :slope-slip-angle 1.0
                             :bend-factor 1.0
                             :bend-speed 1.0
                             :alignv 1.0
                             :slope-up-traction 1.0
                             :align-speed 1.0
                             :turnvf 30.0
                             :turnvvf 30.0
                             :tiltvf 30.0
                             :tiltvvf 18.0
                             :vel-turn 10922.667
                             ;; :slope-up-factor 1.0
                             ;; :slope-down-factor 1.0
                             ;; :impact-fric 1.0
                             :mode 'air
                             :flags (surface-flag air)
                             )
        )


(defstate target-yellow-jump-blast (target)
  :event target-standard-event-handler
  :enter (behavior ()
    (set! (-> self control mod-surface) *yellow-jump-mods*)
    (let ((gp-0 (new-stack-vector0)))
      (let ((f0-1 (vector-dot (-> self control dynam gravity-normal) (-> self control transv))))
        0.0
        (vector-! gp-0 (-> self control transv) (vector-float*! gp-0 (-> self control dynam gravity-normal) f0-1))
        )
      (let* ((f0-2 (vector-length gp-0))
             (f1-1 f0-2)
             (f2-0 46917.434)
             )
        (vector+!
          (-> self control transv)
          (vector-float*! (-> self control transv) (-> self control dynam gravity-normal) f2-0)
          (vector-float*! gp-0 gp-0 (/ f0-2 f1-1))
          )
        )
      )
    (none)
    )
  :exit (behavior ()
    (rot->dir-targ! (-> self control))
    ;; (set! (-> self control unknown-dword31) (-> *display* base-frame-counter))
    (target-exit)
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.075))
    (ja-no-eval :group! (-> self draw art-group data 48)
                :num! (seek!) ;; (ja-aframe (the-as float 15.0) 0))
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!) ;; (ja-aframe (the-as float 15.0) 0)))
      )
    (suspend)
    (let ((gp-2 (new-stack-vector0)))
      (let ((f0-6 (vector-dot (-> self control dynam gravity-normal) (-> self control transv))))
        (vector-! gp-2 (-> self control transv) (vector-float*! gp-2 (-> self control dynam gravity-normal) f0-6))
        )
      (let* ((f0-7 (vector-length gp-2))
             (f1-1 f0-7)
             (f2-0 46917.434)
             )
        (vector+!
          (-> self control transv)
          (vector-float*! (-> self control transv) (-> self control dynam gravity-normal) f2-0)
          (vector-float*! gp-2 gp-2 (/ f0-7 f1-1))
          )
        )
      )
    (ja :num! (seek!))
    ;; (let ((gp-0 (camera-matrix)))
    ;;   (let ((s5-1 (vector-float*! (new-stack-vector0) (-> gp-0 vector 2) 8192.0)))
    ;;     (vector+float*! s5-1 s5-1 (-> gp-0 vector 1) -4096.0)
    ;;     (vector+! (-> self gun fire-point) (camera-pos) s5-1)
    ;;     )
    ;;   (set! (-> self gun fire-dir-out quad) (-> gp-0 vector 2 quad))
    ;;   )

  (let ((s5-0 (-> self gun))
        (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
    (set! (-> gp-0 ent) (-> self entity))
    (set! (-> gp-0 charge) 1.0)
    (set! (-> gp-0 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
    (set! (-> gp-0 pos quad) (-> self control trans quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    (set! (-> gp-0 ignore-handle) (process->handle self))
    (let* ((v1-9 *game-info*)
           (a0-9 (+ (-> v1-9 attack-id) 1))
           )
      (set! (-> v1-9 attack-id) a0-9)
      (set! (-> gp-0 attack-id) a0-9)
      )
    (set! (-> gp-0 timeout) (seconds 4))
    (vector-float*! (-> gp-0 vel) (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> self control override-quat)) 819200.0)
    (spawn-projectile gun-yellow-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)
    )

    ;; (process-spawn
    ;;   projectile-yellow
    ;;   :init projectile-init-by-other
    ;;   (-> self entity)
    ;;   (-> self control unknown-vector90)
    ;;   (vector-float*!
    ;;     (new 'stack-no-clear 'vector)
    ;;     (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> self control quat))
    ;;     (the-as float (-> *TARGET-bank* yellow-projectile-speed))
    ;;     )
    ;;   (if (>= (-> self fact-info-target eco-level) (-> *FACT-bank* eco-level-max))
    ;;       16
    ;;       0
    ;;       )
    ;;   #f
    ;;   :to self
    ;;   )
    ;; (set! (-> self control unknown-dword82) (-> self clock frame-counter))
    (let ((gp-4 (-> self clock frame-counter)))
      (until (>= (- (-> self clock frame-counter) gp-4) (seconds 0.1))
        (suspend)
        )
      )
    (ja-no-eval :group! (-> self draw art-group data 48) :num! (seek!) :frame-num (ja-frame-num 0))
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    ;; (if (logtest? (-> self control status) (cshape-moving-flags onsurf))
        ;; (go target-stance)
        (go target-falling #f)
        )
    (none)
    )
  :post target-no-stick-post
  )