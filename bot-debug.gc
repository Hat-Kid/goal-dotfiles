;;-*-Lisp-*-
(in-package goal)

(define *bot-debug-handle* (the handle #f))

(defun-debug kill-bot-debug ()
  (kill-by-name "bot-debug" *active-pool*)
  (set! *bot-debug-handle* (the handle #f))
  (none)
  )

;; (defun-debug bot-flags->string ((bot bot))
;;   (bit-enum->string bot-flags (-> bot bot-flags))
;;   )

(defmacro as-bot (bot type &rest body)
  `(if (type-type? (-> ,bot type) ,type)
    (let ((,type (the ,type ,bot)))
      ,@body
      )
    )
  )

(defun-debug bot-debug ((name string))
  (let ((debug-proc
          (process-spawn-function process :name "bot-debug" (lambda :behavior process ((name string))
            (loop
              (let* ((bot (the bot (process-by-ename name)))
                     (task-ctrl (-> bot ai-ctrl))
                     (course (-> bot course))
                     (waypoint (-> bot waypoint))
                     (spot (-> bot spot))
                     (bits (-> bot bot-task-bits))
                     (flags (-> bot bot-flags))
                     (waypoint-bits (-> bot waypoint-bits)))
                (cond
                  (bot
                    ;; (format *stdcon* "~%")
                    (format *stdcon* "bot debug ~A:~%" (-> bot type))
                    (format *stdcon* "state ~A~%" (-> bot next-state name))
                    (format *stdcon* "waypoint id:~D~%" (-> waypoint waypoint-id))
                    (format *stdcon* "waypoint int32a:~D~%" (-> bot waypoint-int32a))
                    (format *stdcon* "waypoint time:~D~%" (- (-> bot clock frame-counter) (-> bot waypoint-time0)))
                    (format *stdcon* "task control: anchor id ~D~%next ~A~%pool ~D task(s)~%" (-> task-ctrl anchor unique-id) (-> task-ctrl anchor next type) (-> task-ctrl pool tasks-length))
                    (format *stdcon* "task bytes: ")
                    (dotimes (i 15)
                      (format *stdcon* "~D " (-> task-ctrl anchor next bytes i))
                      )
                    (format *stdcon* "~D~%" (-> task-ctrl anchor next bytes 15))
                    (format *stdcon* "bot task bits: #b~B~T~D~%" bits bits)
                    (format *stdcon* "waypoint bits: #b~B~T~D~%" waypoint-bits waypoint-bits)
                    (format *stdcon* "spot: x:~m y:~m z:~m w:~m~%" (-> spot center x) (-> spot center y) (-> spot center z) (-> spot center w))
                    (as-bot bot sig (format *stdcon* "unjam time:~D~%" (-> sig played-unjam-time)))
                    (format *stdcon* "~%bot flags #b~B~T~D~%" flags flags)
                    ;; (if (= (-> bot next-state name) 'charge-plasma)
                    ;;   (let ((plasma (-> (the sig bot) plasma)))
                    ;;     (format *stdcon* "~%sig plasma: flags #b~B speed ~f level ~f~%" (-> plasma flags) (plasma-flags->string plasma-flags (-> plasma flags)) (-> plasma charge-speed) (-> plasma level))
                    ;;     )
                    ;;   )
                    (suspend)
                    )
                  (else
                    (format *stdcon* "bot debug ~S:~%bot is not active!~%" name)
                    (suspend)
                    )
                  )
                )
              )
            )
            name
          )
        )
      )
      (set! *bot-debug-handle* (ppointer->handle debug-proc))
    )
  )

(defun-debug start-bot-debug ((name string))
  (if *bot-debug-handle*
    (format #t "bot debug is already running!~%")
    (bot-debug name)
    )
  )